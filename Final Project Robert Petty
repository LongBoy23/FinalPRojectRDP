def vectSubtract(vector01, vector02):
    """
    This function takes two vectors.
        
    1) Checks to ensure the lengths are equal.
    2) If not equal, function prints error and returns an empty list.
    3) If equal, the subtraction vector is initialized as en empty list.
    4) Iterates over both vectors
        simulateneously using a range [0,length-1]
    5) During iteration, the value of vector01[i] - vector02[i]
        is stored in the result vector.
    6) Returns output as the subtraction vector.
    """
        
    if(len(vector01) == len(vector02)): #if lengths are equal
        vectSubtract = [] #initialize subtraction vector
        for i in range(0, len(vector01)): #iterate over range
            vectSubtract.append(vector01[i] - vector02[i]) #compute and append vector elements to end of subtraction vector.
        return vectSubtract

    else: #lengths are not equal.
        print("VectSub ERROR: Vectors are not of equal length.")
        return []


def dot(vector01, vector02):
    """
    This function takes two vectors.
    1) Checks to ensure the lengths are equal.
    2) If not equal, function prints error and returns an empty list.
    3) If equal, the dot porduct is initialized as en empty list.
    4) Iterates over both vectors
        simulateneously using a range [0,length-1]
    5) During iteration, the value of vector01[i] * vector02[i]
        is stored in the result.
    6) Returns dot product.
    """
    
    if(len(vector01) == len(vector02)): #if lengths are equal
        for i in range(len(vector01)): #type validity check
            if ((type(vector01[i]) != int) and (type(vector01[i]) != float) and (type(vector01[i]) != complex)):
                print("Dot ERROR: Invalid Vector01 Type")
                return null
            if ((type(vector02[i]) != int) and (type(vector02[i]) != float) and (type(vector02[i]) != complex)):
                print("Dot ERROR: Invalid Vector02 Type")
                return null
            
        #correct lengths and types
        dotProduct = 0; #initialize product vector
        for i in range(0, len(vector01)): #iterate over range
            dotProduct += (vector01[i] * vector02[i])
        return dotProduct
    
    else: #lengths are not equal.
        print("dot ERROR: Vectors are not of equal length.")
        return null


def scalarVectMultiplication(scalar, vector):
    """
    1) iterate over range [0, length-1]
    2) during iteration, multiply each element vector[i] by scalar;
        store value in vector[i].
    3) return vector
    """
    # type validity check
    for i in range(len(vector)):
        if ((type(vector[i]) != int) and (type(vector[i]) != float) and (type(vector[i]) != complex)):
            print("ScalarVectMult ERROR: Invalid Vector Type")
            return []
    if ((type(scalar) != int) and (type(scalar) != float) and 
        (type(scalar) != complex)):
        print("ScalarVectMult ERROR: Invalid Scalar Type")
        return []
    
    resultVector = []

    for i in range(0,len(vector)): #iterate over range [0,length-1]
        resultVector.append(vector[i] * scalar) #short-hand
    return resultVector


def twoNorm(vector):
    """
    twoNorm takes a vector as it's argument. 
    It then computes the sum of  the squares of each element of the vector. 
    It then returns the square root of this sum.
    """
    # This variable will keep track of the validity of our input.
    inputStatus = True

    # This for loop will check each element of the vector to see if it's a number. 
    for i in range(len(vector)):  
        if ((type(vector[i]) != int) and (type(vector[i]) != float) and (type(vector[i]) != complex)):
            inputStatus = False
            print("Invalid Input")

    # If the input is valid the function continues to compute the 2-norm
    if inputStatus == True:
        result = 0
        # This for loop will compute the sum of the squares of the elements of the vector. 
        for i in range(len(vector)):
            result = result + (vector[i]**2)
        result = result**(1/2)
        return result
    else:
        return null

def normalize(vector) :
    """
    1) check if empty vector.
    2) If empty, print Error and return null.
    3) If not empty vector, 
    4) compute and store infNorm in infNorm
    5) Iterate over range [0, len-1]
    6) during iteration
        compute element / infNorm store in current vector index.
    """
    
    if (len(vector) == 0):
        print("ERROR: Empty Vector")
        return []
    for i in range(len(vector)):
            if ((type(vector[i]) != int) and (type(vector[i]) != float) and (type(vector[i]) != complex)):
                print("Normalize ERROR: Invalid Vector Type")
                return []
    else:
        tNorm = twoNorm(vector)
        for i in range(0, len(vector)):
            vector[i] *= (1/tNorm)
        return vector

#thinks vector is row vector 

def matVec(matrix, vector):
    # initialize product vector
    prodVect = []
    # store length of vector
    # length of vector == length of prodVect
    length = len(vector)
    
    if (len(vector) != len(matrix)):
      print("MatVec ERROR: Incorrect Dimensions")
      return []
    
    # iterate through range [0, length-1]
    for i in range(length):
        # initialize sum  value to 0
        value = 0
        
        # for each element in respective matrix vector
        for el in matrix[i]:
            # increment product vector value by 
            # (respective value in vector * element)
            value += (vector[i][0] * el)
        #end loop
        
        prodVect.append(value)
    #end loop
    
    return prodVect 

# Matrix -> [Matrix, Matrix]
def QRFactorization(A):
    """
    QRFactorization takes a matrix as it's argument
    1) Confirms type validity
    2) Initialize V, Q, R
    3) Copy A into V
    4) Generate R diagonal using twoNorm
    5) Generate Q norm vectors
    6) Complete R upper triangular 
    """
    # determine dimensions
    numCols = len(A[0])
    numRows = len(A)
    
    # validity flag
    inputStatus = True
    # compatible dimesion check is unnecessary
    # type validity check
    for j in range(numRows):
        for i in range(numCols):
            if ((type(A[j][i]) != int) and (type(A[j][i]) != float) and (type(A[j][i]) != complex)):
                inputStatus = False
                print("ERROR: Invalid Matrix Type")
    
    # if valid
    if inputStatus:
        # Deep Copy matrix A into V
        # Use list comprehensions to initialize matricies V,Q, and R to have
        # default value elements 
        V = [[0] * numCols for i in range(numRows)]
        Q = [[0] * numCols for i in range(numRows)]
        R = [[0] * numRows for i in range(numRows)]

        #Copy A to V
        for i in range(numRows):
            V[i] = A[i]
        
        for i in range(numRows):
          R[i][i] = twoNorm(V[i])
          Q[i] = normalize(V[i])
          
          #something is wrong within this loop
          for j in range(i+1, numRows):
              R[i][j] = dot(Q[i],V[j])
              t = scalarVectMultiplication(R[i][j], Q[i])
              V[j] = vectSubtract(V[j], t) #possible
    
        return [Q,R]
    else:
        return [[],[]]

def vandermonde4(xVect):
    " create and return the vandermonde using data."
    
    # where data is a matrix of the x vector and respective y vector
    numCols = 4
    numRows = len(xVect)
    A = [[0] * numCols for i in range(numRows)]
    for i in range(numRows):
        for j in range(numCols):
            A[i][j] = xVect[i]**j
    return A
    
def transposeMat(qMat):
    """
    function takes a matrix and returns its transpose
    """
    numTRows = len(qMat[0])
    numTCols = len(qMat)
    
    trans = [[0] * numTCols for i in range(numTRows)]
    
    for i in range(numTRows):
        for j in range(numTCols):
            trans[i][j] = qMat[j][i]
    
    return trans
    
    
def backSub(M, v):
    """
     This function solves for our coefficients c0 - c3 and finishes our code!
    """
    l = len(v) - 1
    
    c = [0] * len(v)
    
    c[l] = v[l]/M[l][l]
    
    i = l

    while (i >= 0):
        # easier to go backwards using while loop
        c[i] = v[i]
        for j in range(i+1, len(v)):
            c[i] = c[i] - c[j]*M[j][i]
            c[i] = c[i] / M[i][i]
        i -= 1
    return c

def main(data):
    """
    Takes data of numbers
    1) Computes and stores the vandermonde matrix in A
    2) Computes QR factorization 
    3) Compute Q Transpose
    4) Compute Q*y
    4) Use Backsubstitution to find c such that Rc == Q*y
    5) Build the approximate polynomial using
        the coefficient vector c.
    """
    
    xVector = data[0]
    yRowVector = data[1]

    #convert row vector to column vector
    yColVector = [[0] * 1 for i in range(len(yRowVector))]
    for i in range(len(yRowVector)):
      yColVector[i][0] = yRowVector[i]

    #compute and store vandMat in A
    A = vandermonde4(xVector)

    QR = QRFactorization(A)
    Q = QR[0]
    R = QR[1]
    Qtrans = transposeMat(Q)
    print(Qtrans)
    print("\n")
    print(yColVector)
    z = matVec(Qtrans, yColVector)
        
    c = backSub(R, z)

    print(c)

    
    
dataMat = [
    [0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1],
    [1.102, 1.099, 1.017, 1.111, 1.117, 1.152, 1.265, 1.380, 1.575, 1.857]
]

main(dataMat)
    
